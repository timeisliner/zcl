/* 
zclChat.0.1.vj 2018-5-7 18:23:28

0. copy >> zcChat.0.1.vj 2018-5-7 18:23:28
        >> zcTaskMonitor.0.1.vj 2018-5-9 13:02:42



*/

/*
lib
zcTrigger.0.1.vj 2018-5-7 19:03:14


lib optional


*/

/*
test
  testzcChat.0.1.vj 2018-5-8 13:44:28

*/

/*
输入指令 - + 命令字母 a-z 执行设定操作
*/

library zclChat initializer init requires zcTrigger
globals
  private constant string ENTRY = "-"         // 匹配 进入点
  private constant string EX_ENTRY = "--"     // 匹配 进入点 扩展
  
endglobals

struct zclChats
  private boolean r = false    // run 是否执行过 事件注册 事件动作添加 true 是 false 否
  private boolean o = false    // on 聊天检测 是否已经开启 true 开启 false 关闭

  private event e = null        // g - 存储 注册的聊天事件
  private zcTriggers zct = 0    // g - 存储 聊天事件的触发器
  private force p = null       // g - 存储 聊天事件的输入玩家
  private string mct = ""       // g - 存储 聊天事件的触发文本
  private boolean ext = false   // sg - 是否 精确匹配 否
  
  private string lmct = null    // sg - last chat text 最后 的 触发文本
  private string lemct = null   // sg - last matched chat text 最后 的 精确匹配 的 触发文本
  
//! textmacro TM_zcChats_GET takes ATTR, MBR, TYPE
  public method operator $ATTR$ takes nothing returns $TYPE$
    return this.$MBR$
  endmethod
//! endtextmacro

//! runtextmacro TM_zcChats_GET("evt", "e", "event")
//! runtextmacro TM_zcChats_GET("trg", "zct", "zcTriggers")
//! runtextmacro TM_zcChats_GET("ply", "p", "player")
//! runtextmacro TM_zcChats_GET("mctext", "mct", "string")
//! runtextmacro TM_zcChats_GET("exact", "ext", "boolean")

//! runtextmacro TM_zcChats_GET("lmctext", "lmct", "string")
//! runtextmacro TM_zcChats_GET("lemctext", "lemct", "string")

//! textmacro TM_zcChats_SET takes ATTR, ARG, MBR, TYPE
  public method operator $ATTR$= takes $TYPE$ $ARG$ returns nothing
    set this.$MBR$ = $ARG$
  endmethod
//! endtextmacro

//! runtextmacro TM_zcChats_SET("exact", "aext", "ext", "boolean")
//! runtextmacro TM_zcChats_SET("lmctext", "almctext", "lmct", "string")
//! runtextmacro TM_zcChats_SET("lemctext", "alemctext", "lemct", "string")
  
  
  // 启用 禁用 聊天事件
//! textmacro TM_zcChats_OO takes STATUS, IS, VALUE
  method $STATUS$ takes nothing returns nothing
    debug call BJDebugMsg("zclChats .. $STATUS$")
    if r and $IS$ then
      set this.o = $VALUE$
      call this.zct.$STATUS$()
    endif
  endmethod
//! endtextmacro

//! runtextmacro TM_zcChats_OO("on", "not o", "true")      // 启用
//! runtextmacro TM_zcChats_OO("off", "o", "false")        // 禁用

  
  method run takes string amatch, code action returns nothing
    if r then 
      return
    endif
    
    set this.r = true
    set this.o = true
    set this.mct = amatch
    set this.e = TriggerRegisterPlayerChatEvent(this.zct.trg, this.p, this.mct, this.ext)
    call TriggerAddAction(this.zct.trg, action)
  endmethod
  
  // constructor
  static method create takes zcTriggers azctrg, player aply returns thistype
    local thistype self = thistype.allocate()
    
    set self.zct = azctrg
    set self.p = aply
    
    return self
  endmethod
  
  // on destructor
  // automatic call
  private method onDestroy takes nothing returns nothing
    call this.zct.destroy()
    set this.e = null
    set this.zct = 0
    set this.p = null
    set this.mct = null
    set this.ext = false
    set this.lmct = null
    set this.lemct = null
    set this.r = false
    set this.o = false
    debug call zcDebugs.output("zclChats .. destroyed!")
  endmethod
endstruct


private function chatAction takes nothing returns nothing
  local string t = GetEventPlayerChatString()
  local string mt = GetEventPlayerChatStringMatched()
  local integer length = StringLength(t)
  local integer order
  
  
  local string entry = SubString(t, 1, 2)
  local string space = SubString(t, 2, 3)
  
  call out.show("信息：" + t + " 长度：" + I2S(length))

  
  if length > 3 and space == " " then
    if entry == TEST  then
      call out.show("有效信息：" + SubString(t, 3, 10))
    elseif entry == "o" then
      if length == 5 and SubString(t, 3, 5) == "on" then
        call chat.on()
      elseif length == 6 and SubString(t, 3, 6) == "off" then
        call chat.off()
      else
        call out.show("错误信息：" + t + "指令系统关闭中...")
        call chat.destroy()
      endif
    elseif entry == ORDER then
      if length == 4 then
        set order = S2I(SubString(t, 3, 4))
        call out.show("order : " + I2S(order))
      elseif length == 5 then
        set order = S2I(SubString(t, 3, 5))
        call out.show("order : " + I2S(order))
      else
        call out.show("错误信息：" + t + " .. 跳过 ...")
      endif
    endif
  endif
  
  
  //call out.show("GetEventPlayerChatString " + t)
  //call out.show("GetEventPlayerChatStringMatched " + mt)
  //call out.show("StringCase upper:true" + StringCase(t, true))
  //call out.show("StringCase upper:false " + StringCase(t, false))
  //call out.show("GetLocalizedString " + GetLocalizedString(t))
  //call out.show("StringLength " + I2S(StringLength(t)))
  //call out.show("SubString 3 - 10 " + SubString(t, 3, 10))
  //call out.show("SubString 0 - 2" + SubString(t, 0, 2))
  //call out.show("StringHash " + I2S(StringHash(t)))
endfunction

// 输入指令检测
// 指令标识 -
private function onChat takes nothing returns nothing
  local player p = Player(0)
  set chat = zclChats.create(zcTriggers.create(), p)
  set chat.exact = false
  
  call chat.run(ENTRY, function chatAction)
  
  if chat.exact then
    call out.show("精确匹配：ON")
  else
    call out.show("精确匹配：OFF")
  endif
  

  call out.show("输入： -c info")
  call out.show("开启触发： -o on")
  call out.show("关闭触发： -o off")
  
  set p = null
endfunction

globals
  // switch
  private boolean Ready = false
endglobals

private function init takes nothing returns nothing
  // prevent reinit
  if Ready then
    return
  endif
  
  // 开启聊天输入指令
  call onChat()
  
  // switch off
  set Ready = true
endfunction


endlibrary

